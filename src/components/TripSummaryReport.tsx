import React, { useState } from 'react';
import { X, Download, Share2, Calendar, MapPin, Users, DollarSign, Clock, CheckCircle, Plane, Shield, Target, Star, TrendingUp } from 'lucide-react';
import type { Trip, Day, Activity, Flight, Insurance } from '../types';

interface TripSummaryReportProps {
  isOpen: boolean;
  onClose: () => void;
  trip: Trip;
  days: Day[];
  activities: Activity[];
  flights: Flight[];
  insurance: Insurance[];
  checklist: any[];
  totalBudget: number;
}

export const TripSummaryReport: React.FC<TripSummaryReportProps> = ({
  isOpen,
  onClose,
  trip,
  days,
  activities,
  flights,
  insurance,
  checklist,
  totalBudget
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'itinerary' | 'budget' | 'logistics'>('overview');

  if (!isOpen) return null;

  // Calculate statistics
  const totalActivities = activities.length;
  const totalDuration = activities.reduce((sum, a) => sum + a.duration_minutes, 0);
  const averageActivityCost = totalActivities > 0 ? activities.reduce((sum, a) => sum + a.estimated_cost, 0) / totalActivities : 0;
  const checklistCompletion = checklist.length > 0 ? Math.round((checklist.filter(item => item.is_completed).length / checklist.length) * 100) : 0;
  
  // Group activities by type
  const activitiesByType = activities.reduce((acc, activity) => {
    acc[activity.activity_type] = (acc[activity.activity_type] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // Group activities by day
  const activitiesByDay = days.map(day => ({
    day,
    activities: activities.filter(a => a.day_id === day.id).sort((a, b) => a.order_index - b.order_index)
  }));

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'flight': return '✈️';
      case 'hotel': return '🏨';
      case 'meal': return '🍽️';
      case 'transport': return '🚗';
      case 'attraction': return '🎯';
      default: return '📍';
    }
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  const handleDownloadReport = () => {
    // Create a simple text version of the report
    const reportContent = `
TRIP SUMMARY REPORT
===================

Trip: ${trip.title}
Destination: ${trip.destination}
Duration: ${trip.duration_days} days
Travelers: ${trip.number_of_travelers || 1}
Total Budget: $${totalBudget.toFixed(2)}

OVERVIEW
--------
Total Activities: ${totalActivities}
Total Duration: ${formatDuration(totalDuration)}
Average Activity Cost: $${averageActivityCost.toFixed(2)}
Checklist Completion: ${checklistCompletion}%

DAILY ITINERARY
---------------
${activitiesByDay.map(({ day, activities }) => `
Day ${day.day_number} (${day.date}):
${activities.map(a => `  • ${a.title} - $${a.estimated_cost} (${formatDuration(a.duration_minutes)})`).join('\n')}
`).join('\n')}

FLIGHTS
-------
${flights.map(f => `• ${f.airline} ${f.flight_number}: ${f.origin} → ${f.destination} - $${f.price}`).join('\n')}

INSURANCE
---------
${insurance.map(i => `• ${i.provider} ${i.policy_type}: $${i.premium_cost} (Coverage: $${i.coverage_amount})`).join('\n')}

Generated by TripPlanner
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${trip.title.replace(/\s+/g, '_')}_Summary_Report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShareReport = async () => {
    const shareData = {
      title: `${trip.title} - Trip Summary`,
      text: `Check out my ${trip.duration_days}-day trip to ${trip.destination}! ${totalActivities} activities planned with a budget of $${totalBudget.toFixed(2)}.`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(`${shareData.title}\n${shareData.text}\n${shareData.url}`);
      alert('Trip summary copied to clipboard!');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
      <div className="bg-white rounded-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <span className="text-3xl">📊</span>
              </div>
              <div>
                <h2 className="text-3xl font-bold">Trip Summary Report</h2>
                <p className="text-indigo-100 text-lg">{trip.title} • {trip.destination}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleDownloadReport}
                className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-all flex items-center space-x-2"
              >
                <Download className="w-4 h-4" />
                <span>Download</span>
              </button>
              <button
                onClick={handleShareReport}
                className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-all flex items-center space-x-2"
              >
                <Share2 className="w-4 h-4" />
                <span>Share</span>
              </button>
              <button
                onClick={onClose}
                className="text-white hover:bg-white hover:bg-opacity-20 rounded-full p-2 transition-all"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8">
            <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">{trip.duration_days}</div>
              <div className="text-indigo-100 text-sm">Days</div>
            </div>
            <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">{totalActivities}</div>
              <div className="text-indigo-100 text-sm">Activities</div>
            </div>
            <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">${totalBudget.toFixed(0)}</div>
              <div className="text-indigo-100 text-sm">Total Budget</div>
            </div>
            <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">{checklistCompletion}%</div>
              <div className="text-indigo-100 text-sm">Ready</div>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex border-b border-gray-200 bg-gray-50">
          {[
            { id: 'overview', label: 'Overview', icon: Star },
            { id: 'itinerary', label: 'Itinerary', icon: Calendar },
            { id: 'budget', label: 'Budget', icon: DollarSign },
            { id: 'logistics', label: 'Logistics', icon: Target }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveTab(id as any)}
              className={`flex items-center space-x-2 px-6 py-4 font-medium transition-all ${
                activeTab === id
                  ? 'text-indigo-600 border-b-2 border-indigo-600 bg-white'
                  : 'text-gray-600 hover:text-gray-900 hover:bg-white hover:bg-opacity-50'
              }`}
            >
              <Icon className="w-4 h-4" />
              <span>{label}</span>
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="p-8 max-h-96 overflow-y-auto">
          {activeTab === 'overview' && (
            <div className="space-y-8">
              {/* Trip Overview */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                    <MapPin className="w-5 h-5 text-blue-600" />
                    <span>Trip Details</span>
                  </h3>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Destination:</span>
                      <span className="font-medium">{trip.destination}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Duration:</span>
                      <span className="font-medium">{trip.duration_days} days</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Travelers:</span>
                      <span className="font-medium">{trip.number_of_travelers || 1}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Dates:</span>
                      <span className="font-medium">{trip.start_date} to {trip.end_date}</span>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6 border border-green-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                    <TrendingUp className="w-5 h-5 text-green-600" />
                    <span>Planning Progress</span>
                  </h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Activities Planned:</span>
                      <span className="font-medium text-green-600">{totalActivities}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Flights Searched:</span>
                      <span className="font-medium text-green-600">{flights.length > 0 ? '✓' : '○'}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Insurance Quoted:</span>
                      <span className="font-medium text-green-600">{insurance.length > 0 ? '✓' : '○'}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Checklist Ready:</span>
                      <span className="font-medium text-green-600">{checklistCompletion}%</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Activity Breakdown */}
              <div className="bg-gray-50 rounded-xl p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Activity Breakdown</h3>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {Object.entries(activitiesByType).map(([type, count]) => (
                    <div key={type} className="text-center bg-white rounded-lg p-4 border border-gray-200">
                      <div className="text-2xl mb-2">{getActivityIcon(type)}</div>
                      <div className="font-semibold text-gray-900">{count}</div>
                      <div className="text-sm text-gray-600 capitalize">{type}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'itinerary' && (
            <div className="space-y-6">
              <h3 className="text-xl font-semibold text-gray-900">Daily Itinerary</h3>
              {activitiesByDay.map(({ day, activities }) => (
                <div key={day.id} className="bg-gray-50 rounded-xl p-6">
                  <div className="flex items-center space-x-3 mb-4">
                    <div className="w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold">
                      {day.day_number}
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900">Day {day.day_number}</h4>
                      <p className="text-sm text-gray-600">{day.date}</p>
                    </div>
                  </div>
                  
                  {activities.length === 0 ? (
                    <p className="text-gray-500 italic">No activities planned for this day</p>
                  ) : (
                    <div className="space-y-3">
                      {activities.map((activity, index) => (
                        <div key={activity.id} className="flex items-center space-x-4 bg-white rounded-lg p-4 border border-gray-200">
                          <div className="text-sm text-gray-500 w-8">{index + 1}.</div>
                          <div className="text-lg">{getActivityIcon(activity.activity_type)}</div>
                          <div className="flex-1">
                            <h5 className="font-medium text-gray-900">{activity.title}</h5>
                            {activity.description && (
                              <p className="text-sm text-gray-600">{activity.description}</p>
                            )}
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium text-gray-900">${activity.estimated_cost}</div>
                            <div className="text-xs text-gray-500">{formatDuration(activity.duration_minutes)}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}

          {activeTab === 'budget' && (
            <div className="space-y-6">
              <h3 className="text-xl font-semibold text-gray-900">Budget Analysis</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6 border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2">Total Budget</h4>
                  <div className="text-3xl font-bold text-green-600">${totalBudget.toFixed(2)}</div>
                  <div className="text-sm text-green-700">${(totalBudget / (trip.number_of_travelers || 1)).toFixed(2)} per person</div>
                </div>
                
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-2">Activities Cost</h4>
                  <div className="text-3xl font-bold text-blue-600">
                    ${activities.reduce((sum, a) => sum + a.estimated_cost, 0).toFixed(2)}
                  </div>
                  <div className="text-sm text-blue-700">Average: ${averageActivityCost.toFixed(2)} per activity</div>
                </div>
                
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-6 border border-purple-200">
                  <h4 className="font-semibold text-purple-800 mb-2">Daily Average</h4>
                  <div className="text-3xl font-bold text-purple-600">
                    ${(totalBudget / trip.duration_days).toFixed(2)}
                  </div>
                  <div className="text-sm text-purple-700">Per day budget</div>
                </div>
              </div>

              {/* Budget Breakdown by Day */}
              <div className="bg-gray-50 rounded-xl p-6">
                <h4 className="font-semibold text-gray-900 mb-4">Daily Budget Breakdown</h4>
                <div className="space-y-3">
                  {activitiesByDay.map(({ day, activities }) => {
                    const dayCost = activities.reduce((sum, a) => sum + a.estimated_cost, 0);
                    return (
                      <div key={day.id} className="flex items-center justify-between bg-white rounded-lg p-4 border border-gray-200">
                        <div>
                          <span className="font-medium">Day {day.day_number}</span>
                          <span className="text-sm text-gray-600 ml-2">({activities.length} activities)</span>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold">${dayCost.toFixed(2)}</div>
                          <div className="text-xs text-gray-500">
                            {((dayCost / totalBudget) * 100).toFixed(1)}% of budget
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'logistics' && (
            <div className="space-y-6">
              <h3 className="text-xl font-semibold text-gray-900">Travel Logistics</h3>
              
              {/* Flights */}
              {flights.length > 0 && (
                <div className="bg-blue-50 rounded-xl p-6 border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-4 flex items-center space-x-2">
                    <Plane className="w-5 h-5" />
                    <span>Flight Options</span>
                  </h4>
                  <div className="space-y-3">
                    {flights.map((flight) => (
                      <div key={flight.id} className="bg-white rounded-lg p-4 border border-blue-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium">{flight.airline} {flight.flight_number}</div>
                            <div className="text-sm text-gray-600">{flight.origin} → {flight.destination}</div>
                          </div>
                          <div className="text-right">
                            <div className="font-semibold text-blue-600">${flight.price}</div>
                            <div className="text-xs text-gray-500">per person</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Insurance */}
              {insurance.length > 0 && (
                <div className="bg-green-50 rounded-xl p-6 border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-4 flex items-center space-x-2">
                    <Shield className="w-5 h-5" />
                    <span>Insurance Options</span>
                  </h4>
                  <div className="space-y-3">
                    {insurance.map((policy) => (
                      <div key={policy.id} className="bg-white rounded-lg p-4 border border-green-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium">{policy.provider}</div>
                            <div className="text-sm text-gray-600 capitalize">{policy.policy_type} Coverage</div>
                            <div className="text-xs text-gray-500">Coverage: ${policy.coverage_amount?.toLocaleString()}</div>
                          </div>
                          <div className="text-right">
                            <div className="font-semibold text-green-600">${policy.premium_cost}</div>
                            <div className="text-xs text-gray-500">premium</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Checklist Status */}
              {checklist.length > 0 && (
                <div className="bg-orange-50 rounded-xl p-6 border border-orange-200">
                  <h4 className="font-semibold text-orange-800 mb-4 flex items-center space-x-2">
                    <CheckCircle className="w-5 h-5" />
                    <span>Packing Checklist</span>
                  </h4>
                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                    {['documents', 'clothing', 'electronics', 'health', 'misc'].map((category) => {
                      const categoryItems = checklist.filter(item => item.category === category);
                      const completed = categoryItems.filter(item => item.is_completed).length;
                      const total = categoryItems.length;
                      const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
                      
                      return (
                        <div key={category} className="bg-white rounded-lg p-4 border border-orange-200 text-center">
                          <div className="text-2xl mb-2">
                            {category === 'documents' && '📄'}
                            {category === 'clothing' && '👕'}
                            {category === 'electronics' && '🔌'}
                            {category === 'health' && '🏥'}
                            {category === 'misc' && '📦'}
                          </div>
                          <div className="font-semibold text-orange-800">{percentage}%</div>
                          <div className="text-xs text-orange-600 capitalize">{category}</div>
                          <div className="text-xs text-gray-500">{completed}/{total}</div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="bg-gray-50 px-8 py-4 border-t border-gray-200">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              Report generated on {new Date().toLocaleDateString()} by TripPlanner
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={handleDownloadReport}
                className="bg-indigo-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-indigo-700 transition-colors flex items-center space-x-2"
              >
                <Download className="w-4 h-4" />
                <span>Download Report</span>
              </button>
              <button
                onClick={onClose}
                className="bg-gray-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-gray-700 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};